@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorAppEvergreenOIDC.Pages
@using Microsoft.AspNetCore.Authorization
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
@inject TokenClient tokenClient;
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies;
@using Microsoft.AspNetCore.Authentication.OpenIdConnect;
@using System.Globalization
@using Microsoft.AspNetCore.Localization

@inject IConfiguration Configuration;

@using System.Security.Claims;

@attribute [Authorize]

@{
    this.HttpContext.Response.Cookies.Append(
        CookieRequestCultureProvider.DefaultCookieName,
        CookieRequestCultureProvider.MakeCookieValue(
            new RequestCulture(
                CultureInfo.CurrentCulture,
                CultureInfo.CurrentUICulture)));

    var currentUser = this.HttpContext.User;
    var AuthenticationStatus = currentUser?.Identity?.IsAuthenticated;

    var tokens = new InitialApplicationState
            {
                AccessToken = null,
                RefreshToken = null,
                IdToken = null,
                IsAuthenticated = Convert.ToBoolean(AuthenticationStatus)
            };

    // Refresh tokens whenever the user refreshes the page
    try
    {
        await this.tokenClient.RefreshAccessToken(this.HttpContext);
        tokens.AccessToken = await this.tokenClient.GetAccessToken(this.HttpContext);
        tokens.RefreshToken = await this.tokenClient.GetRefreshToken(this.HttpContext);
        tokens.IdToken = await this.tokenClient.GetIdToken(this.HttpContext);
    }
    catch (Exception e)
    {
        await this.HttpContext.SignOutAsync(CookieAuthenticationDefaults.AuthenticationScheme);
        await this.HttpContext.SignOutAsync(OpenIdConnectDefaults.AuthenticationScheme);
        Redirect(Configuration["OpenIDConnect:LogoutEndpoint"]!);
        Redirect("/");

        e.GetType();
    }
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="BlazorAppEvergreenOIDC.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" param-InitialState="tokens" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
</body>
</html>
