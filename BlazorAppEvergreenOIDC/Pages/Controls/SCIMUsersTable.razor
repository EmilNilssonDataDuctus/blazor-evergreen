@using BlazorAppEvergreenOIDC.Models.ScimModels
@using BlazorAppEvergreenOIDC.Models.ScimModels.Responses
@using System.Globalization
@using BlazorAppEvergreenOIDC.Data

@inject FileLogger fileLogger
@inject ScimUserService ScimUsersService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CultureExample> Loc

<MudPaper Class="mt-0 mb-4 pa-4">
    <MudPaper Class="mt-0 mb-4 pa-4">
        <MudPaper Class="mt-4">
            <MudInputLabel>
                <MudTextField Class="mt-4" @bind-Value="_searchQueryUserName" Label="@Loc["labelSearchUsername"]" Variant="Variant.Outlined" AutoFocus></MudTextField>
            </MudInputLabel>
        </MudPaper>
        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=> await PerformSearch())" type="submit">@Loc["searchLabel"]</MudButton>
        <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(async ()=> await ClearSearch())">@Loc["clearLabel"]</MudButton>
    </MudPaper>

    <MudButton Variant="Variant.Filled" OnClick="() => HandlePrev()" Disabled="@_prevDisabled">
        @Loc["prevTen"]
    </MudButton>
    <MudButton Variant="Variant.Filled" OnClick="() => HandleNext()" Disabled="@_nextDisabled">
        @Loc["nextTen"]
    </MudButton>
    @Loc["totalResults"]: @_totalResults

    <MudTable Items="@_Users" Hover="true" SortLabel="@Loc["labelSortBy"]" Dense="true">
        <ToolBarContent>
            <MudText Typo="Typo.h2">@Loc["headingUsers"]</MudText>
            <MudSpacer />
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<ResourceUser, object>(x=>x.GetFamilyName())" T="ResourceUser">@Loc["familyName"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ResourceUser, object>(x=>x.userName)" T="ResourceUser">@Loc["userName"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ResourceUser, object>(x=>x.id)" T="ResourceUser">@Loc["id"]</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<ResourceUser, object>(x=>x.GetFirstEmail())" T="ResourceUser">@Loc["email"]</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="@Loc["familyName"]">@context.GetFamilyName()</MudTd>
            <MudTd DataLabel="@Loc["userName"]">@context.userName</MudTd>
            <MudTd DataLabel="@Loc["id"]">@context.id</MudTd>
            <MudTd DataLabel="@Loc["email"]">@context.GetFirstEmail()</MudTd>
            <MudTh>
                <button type="button" class="btn btn-primary table-btn" @onclick="@(() => SeeFullUser(@context.id))">@Loc["buttonSeeFullUserInfo"]</button>
            </MudTh>
        </RowTemplate>
    </MudTable>
</MudPaper>

@code {

    private List<ResourceUser>? _Users = new List<ResourceUser>();

    private bool confirmDelete { get; set; } = false;
    private bool _prevDisabled { get; set; } = true;
    private bool _nextDisabled { get; set; } = false;

    private int _count { get; set; } = 10;
    private int _startIndex { get; set; } = 1;
    private int _totalResults { get; set; }

    private string _searchQueryUserName { get; set; } = string.Empty;

    private async Task PerformSearch()
    {
        _startIndex = 1;
        await GetUsersFromScim();

        CheckIfDisablePrevButton();
        CheckIfDisableNextButton();
    }
    private async Task ClearSearch()
    {
        _startIndex = 1;

        _searchQueryUserName = string.Empty;
        await GetUsersFromScim();

        CheckIfDisablePrevButton();
        CheckIfDisableNextButton();
    }

    private async Task HandlePrev()
    {
        _nextDisabled = false;

        if (_startIndex > 9)
        {
            _startIndex = _startIndex - 10;
        }
        else
        {
            _startIndex = 1;
        }
        await GetUsersFromScim();
    }

    private async Task HandleNext()
    {
        _prevDisabled = false;
        _startIndex = _startIndex + 10;
        await GetUsersFromScim();
    }

    private void CheckIfDisablePrevButton()
    {
        // Disable prev button on first page
        if (_startIndex < 11)
        {
            _prevDisabled = true;
        }
    }
    private void CheckIfDisableNextButton()
    {
        _nextDisabled = false;

        // Disable next button on last page
        if (_Users?.Count < _count)
        {
            _nextDisabled = true;
        }
        if (_totalResults < 11)
        {
            _nextDisabled = true;
        }
    }

    private async Task GetUsersFromScim()
    {
        try
        {
            ResponseGetUsers response = await ScimUsersService.GetUsersAsyncWithSearchQuery(_count, _startIndex, _searchQueryUserName);
            _Users = response?.Resources?.ToList<ResourceUser>();
            _totalResults = response!.totalResults;

            CheckIfDisablePrevButton();
            CheckIfDisableNextButton();
        }
        catch (Exception e)
        {
            e.GetType();
            fileLogger.SaveLogToFile(e.ToString());
            throw e;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetUsersFromScim();
    }

    private void SeeFullUser(string userId)
    {
        NavigationManager.NavigateTo($"/userpage/{userId}");
    }
}
