@* @page "/server-sync"
@using System.Net.Http.Json
@using BlazorAppEvergreenOIDC.Models.ScimModels.Responses
@using Models.ScimModels
@using System.Globalization


@inject HttpClient httpClient
@inject ScimUserService ScimUsersService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CultureExample> Loc

<MudTable ServerData="@(new Func<TableState, Task<TableData<ResourceUser>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5, 10, 50, 100 }" />
    </PagerContent>
    <ToolBarContent>
        <MudText Typo="Typo.h6">SCIM Data server synced</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>

    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="family_name" T="ResourceUser">@Loc["familyName"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="given_name" T="ResourceUser">@Loc["givenName"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="id" T="ResourceUser">@Loc["id"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="user_name" T="ResourceUser">@Loc["userName"]</MudTableSortLabel></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Loc["familyName"]">@context.name?.familyName</MudTd>
        <MudTd DataLabel="@Loc["givenName"]">@context.name?.givenName</MudTd>
        <MudTd DataLabel="@Loc["id"]">@context.id</MudTd>
        <MudTd DataLabel="@Loc["userName"]">@context.userName</MudTd>
        <MudTh>
            <MudButton Variant="Variant.Filled" @onclick="@(() => SeeFullUser(@context.id))">@Loc["buttonSeeFullUserInfo"]</MudButton>
        </MudTh>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
</MudTable>

@code {
    private IEnumerable<ResourceUser> pagedData;
    private MudTable<ResourceUser> table;

    private int totalItems;
    private string searchString = null;



    [Parameter]
    public string? userId { get; set; } = string.Empty;


    private List<ResourceUser>? _Users = new List<ResourceUser>();

    private bool confirmDelete { get; set; } = false;

    private int _count { get; set; } = 50;
    private int _startIndex { get; set; } = 1;

    private string _searchQueryUserName { get; set; } = string.Empty;
    private string _searchQueryFirstName { get; set; } = string.Empty;
    private string _searchQueryLastName { get; set; } = string.Empty;

    private async Task<TableData<ResourceUser>> ServerReload(TableState state)
    {
        IEnumerable<ResourceUser>? data = (await ScimUsersService.GetUsersAsync(_count, _startIndex)).Resources;
        // await Task.Delay(300);
        data = data.Where(user =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (user.userName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (user.name.familyName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (user.name.givenName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        totalItems = data.Count();

        switch (state.SortLabel)
        {
            case "family_name":
                data = data.OrderByDirection(state.SortDirection, user => user.name.familyName);
                break;
            case "given_name":
                data = data.OrderByDirection(state.SortDirection, user => user.name.givenName);
                break;
            case "id":
                data = data.OrderByDirection(state.SortDirection, user => user.id);
                break;
            case "user_name":
                data = data.OrderByDirection(state.SortDirection, user => user.userName);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ResourceUser>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private async Task ClearSearch()
    {
        _searchQueryUserName = string.Empty;
        _searchQueryFirstName = string.Empty;
        _searchQueryLastName = string.Empty;
        await GetUsersFromScim();
    }

    private async Task GetUsersFromScim()
    {
        ResponseGetUsers response = await ScimUsersService.GetUsersAsyncWithSearchQuery(_count, _startIndex, _searchQueryUserName);
        _Users = response.Resources.ToList<ResourceUser>();
    }

    private void SeeFullUser(string userId)
    {
        NavigationManager.NavigateTo($"/userpage/{userId}");
    }
} *@